用例设计的功能：    针对被测功能，来设计需要用几个用例来覆盖测试；      
       用例的高效性、覆盖率、有效性等等  
 

用例设计是有方法： 常用的方法： 重点关注：  等价类、边界值、输入域
                               需要关注的：正交实验法   状态迁移法  流程分析法  
               其他的方法： 输出域、判定表、因果图（了解） 、错误猜测法、异常分析法   



穷举测试： 把软件的功能中出现的所有的取值一一列举出来，挨个覆盖测试；  
    优势：      最好，测试的是最全面；  
    缺点：  工作量太大； 没有办法在有限的时间内完成测试工作；  


一、 等价类 

思路： 把软件的功能中出现的所有的取值一一列举出来， 然后进行分类，分完类之后从每一类挑选一个数据来进行测试即可；     即：同一个类中的值是等价的；如果其中一个值测试之后没问题，那么这个类中的其他值也就不会有问题；

分类原则： 如果有一些值，在被测软件中的处理规则和输出都一样的话，那么这些值就是等价的；就可以划分到一个等价类中；

   优势：  没有覆盖每一个取值，但是覆盖了每一种情况；所以：工作量比较小；  高效  
   缺点：  没有穷举测试测的全面； 只能做到：如果每个等价类中一个值没问题，那么其他值出现问题的概率比较小；


有2种等价类：
有效等价类：符合条件要求的就是有效等价类； 即：合法  称之为 基本功能  
无效等价类：不符合被测软件条件要求的就是无效等价类； 即：非法

等价类设计用例的过程：
1. 根据需求明确输入和输入的要求； 
2. 根据输入的要求来划分等价类；符合要求的就是有效；不符合就是无效；    ---难点： 多思考； 多积累； 
3. 针对每一个等价类可以准备一个测试数据； 即：挑选一个值
4. 设计用例：
  设计原则：a) 有效等价类和无效等价类必须分开设计；  
           b) 有效等价类设计：  用一个用例尽可能的覆盖多个有效等价类；  即：能一起测试的就一起测试；减少用例数 ；            最后要把每一个有效等价类都要测试到； 

            c) 无效等价类设计： 用一个用例覆盖一个无效等价类； 即：分开测；  
                    测试某一个方面无效时，其他方面要有效；  
5. 用例写作  
       

总结：  等价类提醒测试的时候不要只考虑合法情况的测试，还要覆盖非法；   



二、 边界值分析法   

思路：  边界是问题多发区，要多关注； 
软件中常见的边界： 长度   大小    数量  

为什么关注边界？ int  len= length()获取长度
if(len>6 &&len<=20){         等价类： 10  

}else if(len<6){


}

边界值分析是一个补充方法； 补充提醒凡是有边界的地方，要采用边界的数据进行测试；

3个概念:
上点： 指的是边界上的点
离点： 指的是离边界最近的点
内点： 指的是范围内的点  

边界值的测试原则： 优先测试上点和离点； 内点的优先级低；
原因： 要求上点和离点要分别覆盖合法和非法的情况； 即：如果上点是合法的，那么对应的离点就测试非法的； 如果上点是非法的，那么对应的离点就测合法的；

备注： 准备数据时，也建议尽可能的覆盖多种不同的数据
  


三、  输入域分析法  

是一个补充方法；补充提醒测试特殊的情况，和极限的情况；如果有特殊和极限的情况，直接写用例覆盖即可；
思路： 正常使用已经没什么问题，提醒考虑特殊的场景； 

极限的情况：  常见的： 超大的  、 超长的 、超多的    
特殊情况：（比较容易漏测）  特殊情况视功能而定； 不同的功能，特殊情况会不一样；    是少见的，测试的优先级：低
         例如： 针对添加文件：   测试添加修改了后缀名的情况；
                针对登录功能：   测试多个人用同一个账号来进行登录；     例如：淘宝： 两口子，公用一个账号 ；  敏感：公司办公
                                测试用户名带有后置空格来登录
                                测试用户名大小写的情况   一般：不区分的       外国人： 首字母其余小写  Wumei   
                                测试密码大小写的情况     一般：是区分的   

                针对注册功能： 测试多个人用同一个用户名来进行注册  测试重复注册
                针对修改密码功能：  测试新密码跟旧密码一样的 


3个方法总结一下： 提醒测试的时候要重点关注输入的各种情况；包括：合法的、非法的、边界的、特殊的、极限的；  

备注： 这三个方法会经常结合在一起使用的；



四、 正交试验法
使用场景：  1. 多条件组合查询   2. 兼容性测试     要考虑组合；要考虑输入与输入之间的关联影响；

比较：
1. 用等价类： 不进行组合的；   优势：高效；用例数少；  缺点：不考虑组合，测试不全面
2. 全排列组合：                 优势：测试很全面      缺点：工作量偏大，用例数过多
3. 正交试验发：考虑组合的； 但不是全排列组合，只考虑覆盖两两之间的全排列组合；       优势：折中； 考虑组合；工作量不会过大
      思路： 如果两两之间全排列组合测试没问题，就认为三三个全排列也不会有问题； 四四个全排列也不会有问题； 
                
正交试验发的设计用例过程：
1.  根据需求明确输入和输入的取值；    即：明确因子和状态；
       因子：指的是输入
       状态： 指的是输入的取值；

2. 根据因子和状态来选择正交表；

3. 如果找到刚刚好的正交表，直接写用例即可；

4. 如果找不到刚刚好的正交表；可以找接近的正交表，然后进行修改，让符合实际情况即可；    ---重点关注的
     如果：正交表中的比实际的要多，   怎么修改： 替换
     如果：正交表中的比实际的要少；   怎么修改： 拆分；  备注： 多列需要进行拆分的话，一列一列进行拆分；

5. 正交表处理之后，跟实际情况相符了，就可以直接写用例；


总结： 提醒测试的时候关注输入之间的组合；  有影响有关联的输入就需要考虑组合；


五、 状态迁移法 
测试场景：  一个功能中会存在多种状态，而且相互之间可以切换的这种功能；   即：切换测试   
 例如： QQ的在线状态（在线，隐身，忙碌等等））        播放器的状态：

状态迁移法设计用例的过程：
1. 根据需求明确所有的状态，以及初始状态；
2. 从初始状态出发按照需求画出状态转换树；   即：把状态之间的切换过程画到图中；      （重点关注）  建议采用广度优先画法
3. 根据状态转换树提取所有的分支路径；  
4. 根据每一条分支路径来设计用例；  （重点关注）
     备注： 一条分支路径可能会设计出一个用例； 也可能会设计出多个用例；



  




















